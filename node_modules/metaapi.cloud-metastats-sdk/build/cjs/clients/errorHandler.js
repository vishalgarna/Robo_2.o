"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ApiError: function() {
        return ApiError;
    },
    ForbiddenError: function() {
        return ForbiddenError;
    },
    InternalError: function() {
        return InternalError;
    },
    NotFoundError: function() {
        return NotFoundError;
    },
    TooManyRequestsError: function() {
        return TooManyRequestsError;
    },
    UnauthorizedError: function() {
        return UnauthorizedError;
    },
    ValidationError: function() {
        return ValidationError;
    }
});
/**
 * Base class for API errors. Contains indication of HTTP status.
 */ const isNode = typeof process !== "undefined" && process.release && process.release.name === "node";
let ApiError = class ApiError extends Error {
    /**
   * Sets error code, used for i18n
   * @param {string} code error code for i18n
   */ set code(code) {
        this._code = code;
    }
    /**
   * Returns error code used for i18n
   * @return {string} error code
   */ get code() {
        return this._code;
    }
    /**
   * Set message arguments for i18n
   * @param {Array<Object>} args arguments for i18n
   */ set arguments(args) {
        this._args = args;
    }
    /**
   * Returns message arguments for i18n
   * @return {Array<Object>} message arguments for i18n
   */ get arguments() {
        return this._args;
    }
    /**
   * ApiError constructor
   * @param {Function} clazz error name
   * @param {Object} message error message
   * @param {number} status HTTP status
   * @param {string} url API request URL
   */ constructor(clazz, message, status, url){
        super(url ? message + ". Request URL: " + url : message);
        /**
     * Error name
     * @type {string}
     */ this.name = clazz.name;
        /**
     * HTTP status code
     * @type {number}
     */ this.status = status;
        /**
     * API request URL
     */ this.url = url;
        if (isNode && Error.captureStackTrace) {
            Error.captureStackTrace(this, clazz);
        }
    }
};
let NotFoundError = class NotFoundError extends ApiError {
    /**
   * Represents NotFoundError.
   * @param {string} message error message
   * @param {string} url API request URL
   */ constructor(message, url){
        super(NotFoundError, message, 404, url);
    }
};
let ForbiddenError = class ForbiddenError extends ApiError {
    /**
   * Constructs forbidden error.
   * @param {string} message error message
   * @param {string} url API request URL
   */ constructor(message, url){
        super(ForbiddenError, message, 403, url);
    }
};
let UnauthorizedError = class UnauthorizedError extends ApiError {
    /**
   * Constructs unauthorized error.
   * @param {string} message error message
   * @param {string} url API request URL
   */ constructor(message, url){
        super(UnauthorizedError, message, 401, url);
    }
};
let ValidationError = class ValidationError extends ApiError {
    /**
   * Constructs validation error.
   * @param {string} message error message
   * @param {Object} details error data
   * @param {string} url API request URL
   */ constructor(message, details, url){
        super(ValidationError, message, 400, url);
        /**
     * Validation error details
     * @type {Object}
     */ this.details = details;
    }
};
let InternalError = class InternalError extends ApiError {
    /**
   * Constructs unexpected error.
   * @param {string} message error message
   * @param {string} url API request URL
   */ constructor(message, url){
        super(InternalError, message, 500, url);
    }
};
let TooManyRequestsError = class TooManyRequestsError extends ApiError {
    /**
   * Constructs too many requests error.
   * @param {string} message error message
   * @param {TooManyRequestsErrorMetadata} metadata error metadata
   */ constructor(message, metadata, url){
        super(TooManyRequestsError, message, 429, url);
        this.metadata = metadata;
    }
};

//# sourceMappingURL=data:application/json;base64,