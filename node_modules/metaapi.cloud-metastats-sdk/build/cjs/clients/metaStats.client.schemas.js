/**
 * Open trade
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * Open trade\n */\nexport declare type OpenTrade = {\n\n  /**\n   * _id historical trade id\n   */\n  _id: string,\n\n  /**\n   * MetaApi account id\n   */\n  accountId: string,\n\n  /**\n   * trade volume\n   */\n  volume: number,\n\n  /**\n   * trade duration in minutes\n   */\n  durationInMinutes: number,\n\n  /**\n   * trade profit\n   */\n  profit: number,\n\n  /**\n   * trade gain\n   */\n  gain: number,\n\n  /**\n   * trade success\n   */\n  success: string,\n\n  /**\n   * time the trade was opened at in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  openTime: string,\n\n  /**\n   * trade type\n   */\n  type: string,\n\n  /**\n   * symbol the trade relates to\n   */\n  symbol: string,\n\n  /**\n   * trade opening price\n   */\n  openPrice: number,\n\n  /**\n   * the number of pips earned (positive) or lost (negative) in this trade\n   */\n  pips: number\n\n  /**\n   * trade risk in % of balance\n   */\n  riskInBalancePercent?: number\n\n  /**\n   * trade risk in pips\n   */\n  riskInPips?: number\n\n  /**\n   * trade comment\n   */\n   comment?: string\n\n  /**\n   * trade market value\n   */\n   marketValue?: number\n}\n\n/**\n * Historical trade\n */\nexport declare type Trade = {\n\n  /**\n   * historical trade id\n   */\n  _id: string,\n\n  /**\n   * MetaApi account id\n   */\n  accountId: string,\n\n  /**\n   * trade volume\n   */\n  volume: number,\n\n  /**\n   * trade duration in minutes\n   */\n  durationInMinutes: number,\n\n  /**\n   * trade profit\n   */\n  profit: number,\n\n  /**\n   * trade gain\n   */\n  gain: number,\n\n  /**\n   * trade success\n   */\n  success: string,\n\n  /**\n   * time the trade was opened at in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  openTime: string,\n\n  /**\n   * trade type\n   */\n  type: string,\n\n  /**\n   * symbol the trade relates to\n   */\n  symbol?: string,\n\n  /**\n   * time the trade was closed at in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  closeTime?: string,\n\n  /**\n   * trade opening price\n   */\n  openPrice?: number,\n\n  /**\n   * trade closing price\n   */\n  closePrice?: number,\n\n  /**\n   * the number of pips earned (positive) or lost (negative) in this trade\n   */\n  pips?: number\n  \n  /**\n   * trade risk in % of balance\n   */\n  riskInBalancePercent?: number\n\n   /**\n    * trade risk in pips\n    */\n  riskInPips?: number\n\n  /**\n   * trade comment\n   */\n  comment?: string\n\n  /**\n   * trade market value\n   */\n   marketValue?: number\n}\n\n/**\n * profit from trading a currency pair in one trading day\n */\nexport declare type CurrencySummaryHistoryDayMetrics = {\n\n  /**\n   * date of trading day, in broker timezone, YYYY-MM-DD format\n   */\n  date: string,\n\n  /**\n   * total profit at the end of the day\n   */\n  totalProfit: number,\n\n  /**\n   * total pips of trading day\n   */\n  totalPips?: number,\n\n  /**\n   * total profit of short trades per day\n   */\n  shortProfit?: number,\n\n  /**\n   * total profit of long trades per day\n   */\n  longProfit?: number,\n\n  /**\n   * total pips of short trades per day\n   */\n  shortPips?: number,\n\n  /**\n   * total pips of long trades per day\n   */\n  longPips?: number\n}\n\n/**\n * provides general data of this currency trading\n */\nexport declare type CurrencySummaryTotalMetrics = {\n\n  /**\n   * cumulative profit of this currency trading\n   */\n  profit: number,\n\n  /**\n   * the number of all trades with this currency\n   */\n  trades: number,\n\n  /**\n   * cumulative pips of this currency trading\n   */\n  pips?: number,\n\n  /**\n   * the number of winning trades with this currency\n   */\n  wonTrades?: number,\n\n  /**\n   * the number of losing trades with this currency\n   */\n  lostTrades?: number,\n\n  /**\n   * percentage of winning trades with this currency\n   */\n  wonTradesPercent?: number,\n\n  /**\n   * percentage of losing trades with this currency\n   */\n  lostTradesPercent?: number\n}\n\n/**\n * provides profit and number of trades in specific trade and currency\n */\nexport declare type CurrencySummaryTradeMetrics = {\n\n  /**\n   * cumulative profit of this currency trading\n   */\n  profit: number,\n\n  /**\n   * the number of all trades with this currency\n   */\n  trades: number,\n\n  /**\n   * cumulative pips of this currency trading\n   */\n  pips?: number\n}\n\n/**\n * provides statistics on winning and losing trades indicating\n * the amount in the context of long and short positions.\n * Statistics is given for all currency pairs, for which positions were opened\n */\nexport declare type CurrencySummaryMetrics = {\n\n  /**\n   * trading currency pair\n   */\n  currency: string,\n\n  /**\n   * history of trading a currency pair per trading days\n   */\n  history: Array<CurrencySummaryHistoryDayMetrics>,\n\n  /**\n   * general data (such as profit, number of trades) about trading a specific currency pair\n   */\n  total: CurrencySummaryTotalMetrics,\n\n  /**\n   * profit and number of trades of short trades in a specific currency\n   */\n  short?: CurrencySummaryTradeMetrics,\n\n  /**\n   * profit and number of trades of long trades in a specific currency\n   */\n  long?: CurrencySummaryTradeMetrics\n}\n\n/**\n * provides statistics for one trade period compared to\n * the results for the previous period\n */\nexport declare type PeriodMetrics = {\n\n  /**\n   * cumulative profit of this period\n   */\n  profit: number,\n\n  /**\n   * cumulative pips of this period\n   */\n  pips: number,\n\n  /**\n   * cumulative lots of this period\n   */\n  lots: number,\n\n  /**\n   * gain of this period\n   */\n  gain: number,\n\n  /**\n   * the number of trades of this period\n   */\n  trades: number,\n\n  /**\n   * percentage of winning trades of this period\n   */\n  wonTradesPercent: number,\n\n  /**\n   * difference in profit with the previous period\n   */\n  profitDifference: number,\n\n  /**\n   * difference in pips with the previous period\n   */\n  pipsDifference: number,\n\n  /**\n   * difference in lots with the previous period \n   */\n  lotsDifference: number,\n\n  /**\n   * difference in gain with the previous period\n   */\n  gainDifference: number,\n\n  /**\n   * difference in the number of trades with the previous period\n   */\n  tradesDifference: number,\n\n  /**\n   * difference in percentage of winning trades with the previous period\n   */\n  wonTradesPercentDifference: number\n}\n\n/**\n * provides statistics for today, this week, this month, this year\n */\nexport declare type Periods = {\n  \n  /**\n   * trade information for today\n   */\n  today?: PeriodMetrics,\n\n  /**\n   * trade information for this week\n   */\n  thisWeek?: PeriodMetrics,\n\n  /**\n   * trade information for this month\n   */\n  thisMonth?: PeriodMetrics,\n\n  /**\n   * trade information for this year\n   */\n  thisYear?: PeriodMetrics,\n}\n\n/**\n * provides each profit received from the volume of trade and changes in\n * balance, total accumulated income and existing account drawdown by day\n */\nexport declare type DailyGrowthMetrics = {\n\n  /**\n   * date of trading day in broker timezone, YYYY-MM-DD format\n   */\n  date: string,\n\n  /**\n   * cumulative profit per day\n   */\n  profit?: number,\n\n  /**\n   * cumulative pips per day\n   */\n  pips?: number,\n\n  /**\n   * cumulative lots per day\n   */\n  lots?: number,\n\n  /**\n   * cumulative gains per day\n   */\n  gains?: number,\n\n  /**\n   * total profit in this day end\n   */\n  totalProfit: number,\n\n  /**\n   * total gains in this day end\n   */\n  totalGains: number,\n\n  /**\n   * balance in this day end\n   */\n  balance: number,\n\n  /**\n   * percentage of balance drawdown in this day end\n   */\n  drawdownPercentage?: number,\n\n  /**\n   * maximum registered balance drawdown in basic currency during this day\n   */\n  drawdownProfit?: number\n}\n\n/**\n * currency pair trading information for monthly analysis\n */\nexport declare type MonthlyAnalyticCurrencyMetrics = {\n\n  /**\n   * currency pair\n   */\n  currency: string,\n\n  /**\n   * average holding time of long trades\n   */\n  averageHoldingTimeLongsInMilliseconds?: number,\n\n  /**\n   * average holding time of short trades\n   */\n  averageHoldingTimeShortsInMilliseconds?: number,\n\n  /**\n   * the difference between reward and risk, where the lesser is always one.\n   * So 0 means reward:risk=1:1, 2 means 3:1, -0.5 means 1:1.5\n   */\n  rewardToRiskRatio: number,\n\n  /**\n   * the percentage of popularity of this currency this month\n   */\n  popularityPercent: number\n}\n\n/**\n * monthly analysis of trading on this account\n */\nexport declare type MonthlyAnalyticsMetrics = {\n\n  /**\n   * date of trading month in broker timezone, YYYY-MM format\n   */\n  date: string,\n\n  /**\n   * cumulative profit per month\n   */\n  profit: number,\n\n  /**\n   * cumulative pips per month\n   */\n  pips: number,\n\n  /**\n   * cumulative lots per month\n   */\n  lots: number,\n\n  /**\n   * cumulative gains per month\n   */\n  gains: number,\n\n  /**\n   * the number of trades of this month\n   */\n  trades: number,\n\n  /**\n   * @property {Array<MonthlyAnalyticCurrencyMetrics>} [currencies] list of currency pair trading\n   * informations for monthly analysis\n   */\n  currencies: Array<MonthlyAnalyticCurrencyMetrics>\n}\n\n/**\n * opening/closing deals by days of the week or by by hours of the day\n */\nexport declare type TradeByTimeMetrics = {\n\n  /**\n   * date of trading month in broker timezone, YYYY-MM format\n   */\n  date: string,\n\n  /**\n   * the total profit of the trades at this time\n   */\n  profit: number,\n\n  /**\n   * the total profit of short trades at this time\n   */\n  shortProfit?: number,\n\n  /**\n   * the total profit of long trades at this time\n   */\n  longProfit?: number,\n\n  /**\n   * the total profit of winning trades at this time\n   */\n  wonProfit?: number,\n\n  /**\n   * the total profit of losing trades at this time\n   */\n  lostProfit?: number,\n\n  /**\n   * the total pips of the trades at this time\n   */\n  pips?: number,\n\n  /**\n   * the total pips of short trades at this time\n   */\n  shortPips?: number,\n\n  /**\n   * the total pips of long trades at this time\n   */\n  longPips?: number,\n\n  /**\n   * the total pips of winning trades at this time\n   */\n  wonPips?: number,\n\n  /**\n   * the total pips of losing trades at this time\n   */\n  lostPips?: number,\n\n  /**\n   * cumulative lots of trades at this time \n   */\n  lots: number,\n\n  /**\n   * cumulative gains of trades at this time\n   */\n  gains: number,\n\n  /**\n   * cumulative gains of short trades at this time\n   */\n  shortGains?: number,\n\n  /**\n   * cumulative gains of long trades at this time\n   */\n  longGains?: number,\n\n  /**\n   * cumulative gains of winning trades at this time\n   */\n  wonGains?: number,\n\n  /**\n   * cumulative gains of losing trades at this time\n   */\n  lostGains?: number,\n\n  /**\n   * the number of all trades at this time\n   */\n  trades: number,\n\n  /**\n   * the number of short trades at this time\n   */\n  shortTrades?: number,\n\n  /**\n   * the number of long trades at this time\n   */\n  longTrades?: number,\n\n  /**\n   * the number of winning trades at this time\n   */\n  wonTrades?: number,\n\n  /**\n   * the number of losing trades at this time\n   */\n  lostTrades?: number,\n\n  /**\n   * percentage of short trades at this time\n   */\n  shortTradesPercent?: number,\n\n  /**\n   * percentage of long trades at this time\n   */\n  longTradesPercent?: number,\n\n  /**\n   * percentage of winning trades at this time\n   */\n  wonTradesPercent?: number,\n\n  /**\n   * percentage of losing trades at this time\n   */\n  lostTradesPercent?: number,\n\n  /**\n   * day hour (only for by hour case)', within 0-23\n   */\n  hour?: number,\n\n  /**\n   * weekday number (only for by day case), within 0-6\n   */\n  day?: number\n}\n\n/**\n * risk of ruin of balance metrics\n */\nexport declare type RiskOfRuinMetrics = {\n\n  /**\n   * loss size of balance\n   */\n  lossSize: number,\n\n  /**\n   * probability of loss shows the risk of losing a particular part of the balance\n   */\n  probabilityOfLoss: number,\n\n  /**\n   * the number of losing trades that must be entered sequentially\n   * in order for this part of the balance to be lost\n   */\n  consecutiveLosingTrades: number\n}\n\n/**\n * metrics of one trade duration\n */\nexport declare type OneTradeDurationMetrics = {\n\n  /**\n   * list of gains for this duration\n   */\n  gains: Array<number>,\n\n  /**\n   * list of profits for this duration\n   */\n  profits: Array<number>,\n\n  /**\n   * list of lots for this duration\n   */\n  lots: Array<number>,\n\n  /**\n   * list of pips for this duration\n   */\n  pips?: Array<number>,\n\n  /**\n   * duration of trades in minutes\n   */\n  durationInMinutes: number\n}\n\n/**\n * metrics for each duration of trades\n */\nexport declare type TradeDurationMetrics = {\n\n  /**\n   * metrics of winning trades\n   */\n  won?: Array<OneTradeDurationMetrics>,\n\n  /**\n   * metrics of losing trades\n   */\n  lost?: Array<OneTradeDurationMetrics>\n}\n\n/**\n * collection of metrics of trades in the current column for the diagram\n */\nexport declare type TradeDurationDiagramColumnCollectionMetrics = {\n\n  /**\n   * list of gains\n   */\n  gains: Array<number>,\n\n  /**\n   * list of profits\n   */\n  profits: Array<number>,\n\n  /**\n   * list of lots\n   */\n  lots: Array<number>,\n\n  /**\n   * list of pips\n   */\n  pips?: Array<number>\n}\n\n/**\n * information column about the duration of trades for the diagram\n */\nexport declare type TradeDurationDiagramColumnMetrics = {\n\n  /**\n   * the number of durations in this column\n   */\n  durations: number,\n\n  /**\n   * the number of trades in this column\n   */\n  trades: number,\n\n  /**\n   * name of this column, one of 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months'\n   */\n  name: string,\n\n  /**\n   * minimum trade duration in this column in seconds\n   */\n  minDurationInSeconds: number,\n\n  /**\n   * maximum trade duration in this column in seconds\n   */\n  maxDurationInSeconds?: number,\n\n  /**\n   * collection of metrics of winning trades in this column\n   */\n  won?: TradeDurationDiagramColumnCollectionMetrics,\n\n  /**\n   * collection of metrics of losing trades in this column\n   */\n  lost?: TradeDurationDiagramColumnCollectionMetrics\n}\n\n/**\n * trading statistics metrics\n */\nexport declare type Metrics = {\n\n  /**\n   * indicates whether open positions are included in the metrics,\n   * \"false\" means that there are no open positions. Only for a request with includeOpenPositions=true\n   */\n  inclusive?: boolean,\n\n  /**\n   * money on the account, not accounting for the results of currently open positions\n   */\n  balance: number,\n\n  /**\n   * date of maximum balance that have ever been on the account,\n   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  highestBalanceDate?: string,\n\n  /**\n   * maximum balance that have ever been on the account\n   */\n  highestBalance?: number,\n\n  /**\n   * the result (current amount) of all positions, including opened\n   */\n  equity: number,\n\n  /**\n   * current value of margin\n   */\n  margin: number,\n\n  /**\n   * current value of free margin\n   */\n  freeMargin: number,\n\n  /**\n   * current value of margin level \n   */\n  marginLevel?: number,\n\n  /**\n   * total number of closed positions on the account\n   */\n  trades: number,\n\n  /**\n   * total amount withdrawn from the deposit\n   */\n  withdrawals?: number,\n\n  /**\n   * average trade length\n   * (time from open to close) in milliseconds\n   */\n  averageTradeLengthInMilliseconds?: number,\n\n  /**\n   * the best profit from one trade that has ever been on the account\n   */\n  bestTrade?: number,\n\n  /**\n   * the worst profit from one trade that has ever been on the account\n   */\n  worstTrade?: number,\n\n  /**\n   * the best pips from one trade that has ever been on the account\n   */\n  bestTradePips?: number,\n\n  /**\n   * the worst pips from one trade that has ever been on the account\n   */\n  worstTradePips?: number,\n\n  /**\n   * date of the best profit from one trade that have ever been on the account,\n   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  bestTradeDate?: string,\n\n  /**\n   * date of the best pips from one trade that have ever been on the account,\n   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  bestTradePipsDate?: string,\n\n  /**\n   * date of the worst profit from one trade that have ever been on the account,\n   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  worstTradeDate?: string,\n\n  /**\n   * date of the worst pips from one trade that have ever been on the account,\n   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  worstTradePipsDate?: string,\n\n  /**\n   * compound annual growth rate\n   */\n  cagr?: number,\n\n  /**\n   * commissions charged by the broker for the entire period\n   */\n  commissions?: number,\n\n  /**\n   * compound daily rate of return\n   */\n  dailyGain?: number,\n\n  /**\n   * compound monthly rate of return\n   */\n  monthlyGain?: number,\n\n  /**\n   * percentage of current equity to balance\n   */\n  equityPercent?: number,\n\n  /**\n   * the average expected profitability of one trade in basic currency\n   */\n  expectancy?: number,\n\n  /**\n   * the average expected profitability of one trade in pips\n   */\n  expectancyPips?: number,\n\n  /**\n   * time-weighted rate of return\n   */\n  gain?: number,\n\n  /**\n   * geometric holding period return\n   */\n  geometricHoldingPeriodReturn?: number,\n\n  /**\n   * cumulative interest and swap for the entire period\n   */\n  interest?: number,\n\n  /**\n   * the number of long trades\n   */\n  longTrades?: number,\n\n  /**\n   * the number of short trades\n   */\n  shortTrades?: number,\n\n  /**\n   * the number of long winning trades\n   */\n  longWonTrades?: number,\n\n  /**\n   * the number of short winning trades\n   */\n  shortWonTrades?: number,\n\n  /**\n   * percentage of long winning trades\n   */\n  longWonTradesPercent?: number,\n\n  /**\n   * percentage of short winning trades\n   */\n  shortWonTradesPercent?: number,\n\n  /**\n   * percentage of maximum drawdown of balance during the entire trading history\n   */\n  maxDrawdown?: number,\n\n  /**\n   * mar ratio\n   */\n  mar?: number,\n\n  /**\n   *  total volume of trades\n   */\n  lots?: number,\n\n  /**\n   * cumulative price units\n   */\n  pips?: number,\n\n  /**\n   * the total yield of closed positions for the entire period (total result)\n   */\n  profit: number,\n\n  /**\n   * cumulative deposit for the entire period\n   */\n  deposits: number,\n\n  /**\n   * simple deposit increase without regard to reinvestment\n   */\n  absoluteGain?: number,\n\n  /**\n   * the amount yielded by winning trades divided by the amount\n   * of losses yielded by losing trades. Result in range 0 - Infinity means: `0` - only loss, `1` - profit equals to\n   * loss, `Infinity` - only profit.\n   */\n  profitFactor?: number,\n\n  /**\n   * average return earned in excess of the risk-free rate per unit of volatility.\n   * It is calculated if there are at least 30 closed deals in the history\n   */\n  sharpeRatio?: number,\n\n  /**\n   * differentiates harmful volatility from total overall volatility.\n   * It is calculated if there are at least 30 closed deals in the history\n   */\n  sortinoRatio?: number,\n\n  /**\n   * statistical measure of volatility shows how much\n   * variation or dispersion. It is calculated if there are at least 30 closed deals in the history\n   */\n  standardDeviationProfit?: number,\n\n  /**\n   * a statistical measure that is used to describe profit distribution.\n   * It is calculated if there are at least 30 closed deals in the history\n   */\n  kurtosisProfit?: number,\n\n  /**\n   * average holding period return.\n   * It is calculated if there are at least 30 closed deals in the history\n   */\n  averageHoldingPeriodReturn?: number,\n\n  /**\n   * average win in basic currency\n   */\n  averageWin?: number,\n\n  /**\n   * average win in pips\n   */\n  averageWinPips?: number,\n\n  /**\n   * average loss in basic currency\n   */\n  averageLoss?: number,\n\n  /**\n   * average loss in pips\n   */\n  averageLossPips?: number,\n\n  /**\n   * percentage of winning trades\n   */\n  wonTradesPercent?: number,\n\n  /**\n   * percentage of losing trades\n   */\n  lostTradesPercent?: number,\n\n  /**\n   * ability of a trading system to generate wins and losses in streaks.\n   * It is calculated if there are at least 30 closed deals in the history\n   */\n  zScore?: number,\n\n  /**\n   * probability that a profit will be followed by a profit and a loss by a loss\n   */\n  probability?: number,\n\n  /**\n   * the number of days that have passed since the opening of the first trade\n   */\n  daysSinceTradingStarted?: number,\n\n  /**\n   * currency trading summary\n   */\n  currencySummary?: Array<CurrencySummaryMetrics>,\n\n  /**\n   * daily gain shows the change in account profitability on trading days\n   */\n  dailyGrowth?: Array<DailyGrowthMetrics>,\n\n  /**\n   * monthly analysis of trading on this account\n   */\n  monthlyAnalytics?: Array<MonthlyAnalyticsMetrics>,\n\n  /**\n   * closing deals by days of the week\n   */\n  closeTradesByWeekDay?: Array<TradeByTimeMetrics>,\n\n  /**\n   * opening deals by hour of the day\n   */\n  openTradesByHour?: Array<TradeByTimeMetrics>,\n\n  /**\n   * trading stats for a few periods compared to the results for the previous period\n   */\n  periods?: Periods,\n\n  /**\n   * risk of ruin of balance\n   */\n  riskOfRuin?: Array<RiskOfRuinMetrics>,\n\n  /**\n   * metrics for each duration of trades\n   */\n  tradeDuration?: TradeDurationMetrics,\n\n  /**\n   * list of information columns about the duration of trades for the diagram\n   */\n  tradeDurationDiagram?: Array<TradeDurationDiagramColumnMetrics>\n  \n  /**\n   * total market value of all trades on the account\n   */\n   totalTradeMarketValue?: number\n}"],"names":[],"mappings":"AAAA;;CAEC"}