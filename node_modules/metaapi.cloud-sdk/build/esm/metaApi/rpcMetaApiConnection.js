'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import LoggerManager from '../logger';
import MetaApiConnection from './metaApiConnection';
import TimeoutError from '../clients/timeoutError';
let RpcMetaApiConnection = class RpcMetaApiConnection extends MetaApiConnection {
    /**
   * Opens the connection. Can only be called the first time, next calls will be ignored.
   * @param {string} instanceId connection instance id
   * @return {Promise} promise resolving when the connection is opened
   */ connect(instanceId) {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this._openedInstances.includes(instanceId)) {
                _this._openedInstances.push(instanceId);
            }
            if (!_this._opened) {
                _this._opened = true;
                const accountRegions = _this._account.accountRegions;
                _this._websocketClient.addAccountCache(_this._account.id, accountRegions);
                Object.keys(accountRegions).forEach((region)=>{
                    if (!_this._options.region || _this._options.region === region) {
                        _this._websocketClient.ensureSubscribe(accountRegions[region], 0);
                        _this._websocketClient.ensureSubscribe(accountRegions[region], 1);
                    }
                });
            }
        })();
    }
    /**
   * Closes the connection. The instance of the class should no longer be used after this method is invoked.
   * @param {string} instanceId connection instance id
   */ close(instanceId) {
        var _this = this;
        return _async_to_generator(function*() {
            if (_this._opened) {
                _this._openedInstances = _this._openedInstances.filter((id)=>id !== instanceId);
                if (!_this._openedInstances.length && !_this._closed) {
                    clearInterval(_this._refreshJob);
                    yield _this._connectionRegistry.removeRpc(_this.account);
                    _this._websocketClient.removeSynchronizationListener(_this.account.id, _this);
                    _this._websocketClient.removeAccountCache(_this.account.id);
                    _this._websocketClient.removeReconnectListener(_this);
                    _this._closed = true;
                }
            }
        })();
    }
    /**
   * Invoked when connection to MetaTrader terminal established
   * @param {String} instanceIndex index of an account instance connected
   * @param {Number} replicas number of account replicas launched
   * @return {Promise} promise which resolves when the asynchronous event is processed
   */ onConnected(instanceIndex, replicas) {
        var _this = this;
        return _async_to_generator(function*() {
            const state = _this._getState(instanceIndex);
            state.synchronized = true;
            const region = _this.getRegion(instanceIndex);
            _this.cancelRefresh(region);
        })();
    }
    /**
   * Invoked when connection to MetaTrader terminal terminated
   * @param {String} instanceIndex index of an account instance connected
   * @return {Promise} promise which resolves when the asynchronous event is processed
   */ onDisconnected(instanceIndex) {
        var _this = this;
        return _async_to_generator(function*() {
            const state = _this._getState(instanceIndex);
            state.synchronized = false;
            _this._logger.debug(`${_this._account.id}:${instanceIndex}: disconnected from broker`);
        })();
    }
    /**
   * Invoked when a stream for an instance index is closed
   * @param {String} instanceIndex index of an account instance connected
   */ onStreamClosed(instanceIndex) {
        var _this = this;
        return _async_to_generator(function*() {
            delete _this._stateByInstanceIndex[instanceIndex];
        })();
    }
    /**
   * Returns flag indicating status of state synchronization with MetaTrader terminal
   * @returns {Boolean} a flag indicating status of state synchronization with MetaTrader terminal
   */ isSynchronized() {
        return Object.values(this._stateByInstanceIndex).map((instance)=>instance.synchronized).includes(true);
    }
    /**
   * Waits until synchronization to RPC application is completed
   * @param {Number} timeoutInSeconds synchronization timeout in seconds. Defaults to 5 minutes
   * @return {Promise} promise which resolves when synchronization to RPC application is completed
   * @throws {TimeoutError} if application failed to synchronize with the teminal within timeout allowed
   */ waitSynchronized(timeoutInSeconds = 300) {
        var _this = this;
        return _async_to_generator(function*() {
            _this._checkIsConnectionActive();
            const startTime = Date.now();
            let synchronized = _this.isSynchronized();
            while(!synchronized && startTime + timeoutInSeconds * 1000 > Date.now()){
                yield new Promise((res)=>setTimeout(res, 1000));
                synchronized = _this.isSynchronized();
            }
            if (!synchronized) {
                throw new TimeoutError('Timed out waiting for MetaApi to synchronize to MetaTrader account ' + _this._account.id);
            }
            // eslint-disable-next-line
            while(true){
                try {
                    yield _this._websocketClient.waitSynchronized(_this._account.id, undefined, 'RPC', 5, 'RPC');
                    break;
                } catch (err) {
                    if (Date.now() > startTime + timeoutInSeconds * 1000) {
                        throw err;
                    }
                }
            }
        })();
    }
    /**
   * Invoked when connection to MetaApi websocket API restored after a disconnect
   * @param {String} region reconnected region
   * @param {Number} instanceNumber reconnected instance number
   * @return {Promise} promise which resolves when connection to MetaApi websocket API restored after a disconnect
   */ onReconnected(region, instanceNumber) {
        var _this = this;
        return _async_to_generator(function*() {
            const instanceTemplate = `${region}:${instanceNumber}`;
            Object.keys(_this._stateByInstanceIndex).filter((key)=>key.startsWith(`${instanceTemplate}:`)).forEach((key)=>{
                delete _this._stateByInstanceIndex[key];
            });
        })();
    }
    _getState(instanceIndex) {
        if (!this._stateByInstanceIndex[instanceIndex]) {
            this._stateByInstanceIndex[instanceIndex] = {
                instanceIndex,
                synchronized: false
            };
        }
        return this._stateByInstanceIndex[instanceIndex];
    }
    /**
   * Constructs MetaApi MetaTrader RPC Api connection
   * @param {MetaApiOpts} options MetaApi options
   * @param {MetaApiWebsocketClient} websocketClient MetaApi websocket client
   * @param {MetatraderAccount} account MetaTrader account id to connect to
   * @param {ConnectionRegistry} connectionRegistry metatrader account connection registry
   */ constructor(options, websocketClient, account, connectionRegistry){
        super(options, websocketClient, account, 'RPC');
        this._connectionRegistry = connectionRegistry;
        this._websocketClient.addSynchronizationListener(account.id, this);
        this._stateByInstanceIndex = {};
        this._openedInstances = [];
        Object.values(account.accountRegions).forEach((replicaId)=>this._websocketClient.addReconnectListener(this, replicaId));
        this._logger = LoggerManager.getLogger('MetaApiConnection');
    }
};
/**
 * Exposes MetaApi MetaTrader RPC API connection to consumers
 */ export { RpcMetaApiConnection as default };

//# sourceMappingURL=data:application/json;base64,