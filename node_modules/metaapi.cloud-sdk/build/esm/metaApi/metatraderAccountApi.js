'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import MetatraderAccount from './metatraderAccount';
import MetatraderAccountReplica from './metatraderAccountReplica';
import { MetatraderAccountList } from './metatraderAccountApi';
let MetatraderAccountApi = class MetatraderAccountApi {
    /**
   * Returns trading accounts belonging to the current user, provides pagination in infinite scroll style
   * @param {AccountsFilter} [accountsFilter] optional filter
   * @return {Promise<Array<MetatraderAccount>>} promise resolving with MetaTrader account entities
   */ getAccountsWithInfiniteScrollPagination(accountsFilter) {
        var _this = this;
        return _async_to_generator(function*() {
            let accounts = yield _this._metatraderAccountClient.getAccounts(accountsFilter, '1');
            return accounts.map((a)=>new MetatraderAccount(a, _this._metatraderAccountClient, _this._metaApiWebsocketClient, _this._connectionRegistry, _this._expertAdvisorClient, _this._historicalMarketDataClient, _this._application));
        })();
    }
    /**
   * Returns trading accounts belonging to the current user with accounts count,
   * provides pagination in a classic style
   * @param {AccountsFilter} [accountsFilter] optional filter
   * @return {Promise<MetatraderAccountList>} promise resolving with an array of MetaTrader account entities and count
   */ getAccountsWithClassicPagination(accountsFilter) {
        var _this = this;
        return _async_to_generator(function*() {
            let accounts = yield _this._metatraderAccountClient.getAccounts(accountsFilter, '2');
            return {
                count: accounts.count,
                items: accounts.items.map((a)=>new MetatraderAccount(a, _this._metatraderAccountClient, _this._metaApiWebsocketClient, _this._connectionRegistry, _this._expertAdvisorClient, _this._historicalMarketDataClient, _this._application))
            };
        })();
    }
    /**
   * Returns trading account by id
   * @param {string} accountId MetaTrader account id
   * @return {Promise<MetatraderAccount>} promise resolving with MetaTrader account entity
   */ getAccount(accountId) {
        var _this = this;
        return _async_to_generator(function*() {
            let account = yield _this._metatraderAccountClient.getAccount(accountId);
            return new MetatraderAccount(account, _this._metatraderAccountClient, _this._metaApiWebsocketClient, _this._connectionRegistry, _this._expertAdvisorClient, _this._historicalMarketDataClient, _this._application);
        })();
    }
    /**
   * Returns trading account replica by trading account id and replica id
   * @param {string} accountId MetaTrader primary account id
   * @param {string} replicaId MetaTrader account replica id
   * @return {Promise<MetatraderAccountReplica>} promise resolving with MetaTrader account replica found
   */ getAccountReplica(accountId, replicaId) {
        var _this = this;
        return _async_to_generator(function*() {
            let account = yield _this._metatraderAccountClient.getAccount(accountId);
            let replica = yield _this._metatraderAccountClient.getAccountReplica(accountId, replicaId);
            return new MetatraderAccountReplica(replica, account, _this._metatraderAccountClient);
        })();
    }
    /**
   * Returns replicas for a trading account
   * @param {string} accountId Primary account id
   * @return {Promise<Array<MetatraderAccountReplica>>} promise resolving with MetaTrader account replicas found
   */ getAccountReplicas(accountId) {
        var _this = this;
        return _async_to_generator(function*() {
            let account = yield _this._metatraderAccountClient.getAccount(accountId);
            let replicas = yield _this._metatraderAccountClient.getAccountReplicas(accountId);
            if (replicas.items) {
                replicas = replicas.items;
            }
            return replicas.map((replica)=>new MetatraderAccountReplica(replica, account, _this._metatraderAccountClient));
        })();
    }
    /**
   * Adds a trading account and starts a cloud API server for the trading account
   * @param {NewMetatraderAccountDto} account MetaTrader account data
   * @return {Promise<MetatraderAccount>} promise resolving with created MetaTrader account entity
   */ createAccount(account) {
        var _this = this;
        return _async_to_generator(function*() {
            let id = yield _this._metatraderAccountClient.createAccount(account);
            return _this.getAccount(id.id);
        })();
    }
    /**
   * Constructs a MetaTrader account API instance
   * @param {MetatraderAccountClient} metatraderAccountClient MetaTrader account REST API client
   * @param {MetaApiWebsocketClient} metaApiWebsocketClient MetaApi websocket client
   * @param {ConnectionRegistry} connectionRegistry metatrader account connection registry
   * @param {ExpertAdvisorClient} expertAdvisorClient expert advisor REST API client
   * @param {HistoricalMarketDataClient} historicalMarketDataClient historical market data HTTP API client
   * @param {string} application application name
   */ constructor(metatraderAccountClient, metaApiWebsocketClient, connectionRegistry, expertAdvisorClient, historicalMarketDataClient, application){
        this._metatraderAccountClient = metatraderAccountClient;
        this._metaApiWebsocketClient = metaApiWebsocketClient;
        this._connectionRegistry = connectionRegistry;
        this._expertAdvisorClient = expertAdvisorClient;
        this._historicalMarketDataClient = historicalMarketDataClient;
        this._application = application;
    }
};
/**
 * Exposes MetaTrader account API logic to the consumers
 */ export { MetatraderAccountApi as default };

//# sourceMappingURL=data:application/json;base64,