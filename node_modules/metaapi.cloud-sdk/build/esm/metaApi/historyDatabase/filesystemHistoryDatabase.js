'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import HistoryDatabase from './historyDatabase';
import LoggerManager from '../../logger';
import fs from 'fs';
import path from 'path';
let FilesystemHistoryDatabase = class FilesystemHistoryDatabase extends HistoryDatabase {
    /**
   * Returns history database instance
   * @returns {HistoryDatabase} history database instance
   */ static getInstance() {
        if (!FilesystemHistoryDatabase.instance) {
            FilesystemHistoryDatabase.instance = new FilesystemHistoryDatabase();
        }
        return FilesystemHistoryDatabase.instance;
    }
    /**
   * Loads history from database
   * @param {string} accountId account id
   * @param {string} application application name
   * @return {Promise<{deals: Array<MetatraderDeal>, historyOrders: Array<MetatraderOrder>}>} full account history
   */ loadHistory(accountId, application) {
        var _this = this;
        return _async_to_generator(function*() {
            let { dealsFile, historyOrdersFile } = yield _this._getDbLocation(accountId, application);
            let deals = yield _this._readDb(accountId, dealsFile);
            if (deals.length && Array.isArray(deals[0])) {
                _this.clear(accountId, application);
                deals = [];
            }
            deals.forEach((deal)=>deal.time = new Date(deal.time));
            let historyOrders = yield _this._readDb(accountId, historyOrdersFile);
            if (historyOrders.length && Array.isArray(historyOrders[0])) {
                _this.clear(accountId, application);
                historyOrders = [];
            }
            historyOrders.forEach((historyOrder)=>{
                historyOrder.time = new Date(historyOrder.time);
                historyOrder.doneTime = new Date(historyOrder.doneTime);
            });
            return {
                deals,
                historyOrders
            };
        })();
    }
    /**
   * Removes history from database
   * @param {string} accountId account id
   * @param {string} application application name
   * @return {Promise} promise resolving when the history is removed
   */ clear(accountId, application) {
        var _this = this;
        return _async_to_generator(function*() {
            let { dealsFile, historyOrdersFile } = yield _this._getDbLocation(accountId, application);
            if (fs.existsSync(dealsFile)) {
                yield fs.promises.unlink(dealsFile);
            }
            if (fs.existsSync(historyOrdersFile)) {
                yield fs.promises.unlink(historyOrdersFile);
            }
        })();
    }
    /**
   * Flushes the new history to db
   * @param {string} accountId account id
   * @param {string} application application name
   * @param {Array<MetatraderOrder>} newHistoryOrders history orders to save to db
   * @param {Array<MetatraderDeal>} newDeals deals to save to db
   * @return {Promise} promise resolving when the history is flushed
   */ flush(accountId, application, newHistoryOrders, newDeals) {
        var _this = this;
        return _async_to_generator(function*() {
            let { dealsFile, historyOrdersFile } = yield _this._getDbLocation(accountId, application);
            yield _this._appendDb(historyOrdersFile, newHistoryOrders);
            yield _this._appendDb(dealsFile, newDeals);
        })();
    }
    _getDbLocation(accountId, application) {
        return _async_to_generator(function*() {
            let dir = path.join(process.cwd(), '.metaapi');
            yield fs.promises.mkdir(dir, {
                recursive: true
            });
            return {
                dealsFile: path.join(dir, `${accountId}-${application}-deals.bin`),
                historyOrdersFile: path.join(dir, `${accountId}-${application}-historyOrders.bin`)
            };
        })();
    }
    _readDb(accountId, file) {
        var _this = this;
        return _async_to_generator(function*() {
            if (!fs.existsSync(file)) {
                return [];
            }
            try {
                let data = yield fs.promises.readFile(file, 'utf-8');
                let lines = data.split('\n');
                let result = [];
                for (let line of lines){
                    if (line.length) {
                        result.push(JSON.parse(line));
                    }
                }
                return result;
            } catch (err) {
                _this._logger.warn(`${accountId}: failed to read history db, will remove ${file} now`, err);
                yield fs.promises.unlink(file);
                return [];
            }
        })();
    }
    _appendDb(file, records) {
        return _async_to_generator(function*() {
            if (records && records.length) {
                yield fs.promises.appendFile(file, records.map((r)=>JSON.stringify(r) + '\n').join(''), 'utf-8');
            }
        })();
    }
    /**
   * Constructs the class instance
   */ constructor(){
        super();
        this._logger = LoggerManager.getLogger('FilesystemHistoryDatabase');
    }
};
/**
 * Provides access to history database stored on filesystem
 */ export { FilesystemHistoryDatabase as default };

//# sourceMappingURL=data:application/json;base64,