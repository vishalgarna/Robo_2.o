'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import HistoryDatabase from './historyDatabase';
import Logger from '../../logger';
import { openDB } from 'idb';
let BrowserHistoryDatabase = class BrowserHistoryDatabase extends HistoryDatabase {
    /**
   * Returns history database instance
   * @returns {HistoryDatabase} history database instance
   */ static getInstance() {
        if (!BrowserHistoryDatabase.instance) {
            BrowserHistoryDatabase.instance = new BrowserHistoryDatabase();
        }
        return BrowserHistoryDatabase.instance;
    }
    /**
   * Loads history from database
   * @param {string} accountId account id
   * @param {string} application application name
   * @return {Promise<{deals: Array<MetatraderDeal>, historyOrders: Array<MetatraderOrder>}>} full account history
   */ loadHistory(accountId, application) {
        var _this = this;
        return _async_to_generator(function*() {
            let db;
            try {
                db = yield _this._getDatabase();
                let deals = yield _this._readDb(db, 'deals', accountId + '-' + application);
                deals.forEach((deal)=>deal.time = new Date(deal.time));
                let historyOrders = yield _this._readDb(db, 'historyOrders', accountId + '-' + application);
                historyOrders.forEach((historyOrder)=>{
                    historyOrder.time = new Date(historyOrder.time);
                    historyOrder.doneTime = new Date(historyOrder.doneTime);
                });
                return {
                    deals,
                    historyOrders
                };
            } catch (err) {
                _this._logger.warn(`${accountId}: failed to read history database, will reinitialize it now`, err);
                yield _this.clear(accountId, application);
                return {
                    deals: [],
                    historyOrders: []
                };
            } finally{
                try {
                    yield db.close();
                } catch (err) {
                    _this._logger.error(`${accountId}: error closing db`, err);
                }
            }
        })();
    }
    /**
   * Removes history from database
   * @param {string} accountId account id
   * @param {string} application application name
   * @return {Promise} promise resolving when the history is removed
   */ clear(accountId, application) {
        var _this = this;
        return _async_to_generator(function*() {
            const prefix = accountId + '-' + application;
            const range = IDBKeyRange.bound(prefix, prefix + ':');
            let db;
            try {
                db = yield _this._getDatabase();
                yield db.delete('deals', range);
                yield db.delete('dealsIndex', range);
                yield db.delete('historyOrders', range);
                yield db.delete('historyOrdersIndex', range);
            } catch (e) {
                _this._logger.warn(`${accountId}: failed to clear history storage`, e);
            } finally{
                try {
                    yield db.close();
                } catch (err) {
                    _this._logger.error(`${accountId}: error closing db`, err);
                }
            }
        })();
    }
    /**
   * Flushes the new history to db
   * @param {string} accountId account id
   * @param {string} application application name
   * @param {Array<MetatraderOrder>} newHistoryOrders history orders to save to db
   * @param {Array<MetatraderDeal>} newDeals deals to save to db
   * @return {Promise} promise resolving when the history is flushed
   */ flush(accountId, application, newHistoryOrders, newDeals) {
        var _this = this;
        return _async_to_generator(function*() {
            let db;
            try {
                db = yield _this._getDatabase();
                yield _this._appendDb(db, 'deals', accountId + '-' + application, newDeals);
                yield _this._appendDb(db, 'historyOrders', accountId + '-' + application, newHistoryOrders);
            } catch (e) {
                _this._logger.warn(`${accountId}: failed to flush history storage`, e);
            } finally{
                try {
                    yield db.close();
                } catch (err) {
                    _this._logger.error(`${accountId}: error closing db`, err);
                }
            }
        })();
    }
    _getDatabase() {
        return _async_to_generator(function*() {
            const keyPath = 'id';
            const db = yield openDB('metaapi', 2, {
                upgrade (database, oldVersion, newVersion, transaction) {
                    if (oldVersion !== 2) {
                        if (database.objectStoreNames.contains('deals')) {
                            database.deleteObjectStore('deals');
                        }
                        if (database.objectStoreNames.contains('historyOrders')) {
                            database.deleteObjectStore('historyOrders');
                        }
                    }
                    if (!database.objectStoreNames.contains('dealsIndex')) {
                        database.createObjectStore('dealsIndex', {
                            keyPath
                        });
                    }
                    if (!database.objectStoreNames.contains('deals')) {
                        database.createObjectStore('deals', {
                            keyPath
                        });
                    }
                    if (!database.objectStoreNames.contains('historyOrdersIndex')) {
                        database.createObjectStore('historyOrdersIndex', {
                            keyPath
                        });
                    }
                    if (!database.objectStoreNames.contains('historyOrders')) {
                        database.createObjectStore('historyOrders', {
                            keyPath
                        });
                    }
                }
            });
            return db;
        })();
    }
    _readDb(db, store, prefix) {
        return _async_to_generator(function*() {
            const keys = yield db.getAllKeys(store, IDBKeyRange.bound(prefix, prefix + '-' + ':'));
            let result = [];
            for (let key of keys){
                let value = yield db.get(store, key);
                if (value) {
                    for (let line of value.data.split('\n')){
                        if (line.length) {
                            let record = JSON.parse(line);
                            result.push(record);
                        }
                    }
                }
            }
            return result;
        })();
    }
    _appendDb(db, store, prefix, records) {
        return _async_to_generator(function*() {
            if (records && records.length) {
                let lastKey = yield db.get(store + 'Index', prefix + '-' + 'sn');
                let index = (lastKey || {
                    index: 0
                }).index + 1;
                let data = records.map((r)=>JSON.stringify(r) + '\n').join('');
                yield db.put(store, {
                    data,
                    id: prefix + '-' + index
                });
                yield db.put(store + 'Index', {
                    id: prefix + '-' + 'sn',
                    index
                });
            }
        })();
    }
    /**
   * Constructs the class instance
   */ constructor(){
        super();
        this._logger = Logger.getLogger('BrowserHistoryDatabase');
    }
};
/**
 * Provides access to history database stored in a browser IndexedDB
 */ export { BrowserHistoryDatabase as default };

//# sourceMappingURL=data:application/json;base64,