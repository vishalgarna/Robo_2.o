'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
let DomainClient = class DomainClient {
    /**
   * Returns domain client domain
   * @returns {String} client domain
   */ get domain() {
        return this._domain;
    }
    /**
   * Returns domain client token
   * @returns {String} client token
   */ get token() {
        return this._token;
    }
    /**
   * Sends an authorized json API request
   * @param {Object} opts options request options
   * @param {Boolean} [isExtendedTimeout] whether to run the request with an extended timeout
   * @returns {Promise<Object|String|any>} request result
   */ requestApi(opts, isExtendedTimeout = false) {
        var _this = this;
        return _async_to_generator(function*() {
            yield _this._updateHost();
            try {
                return yield _this._httpClient.request(Object.assign({}, opts, {
                    headers: opts.headers || {
                        'auth-token': _this._token
                    },
                    url: _this._urlCache.url + opts.url,
                    json: true
                }), isExtendedTimeout);
            } catch (err) {
                if (![
                    'ConflictError',
                    'InternalError',
                    'ApiError',
                    'TimeoutError'
                ].includes(err.name)) {
                    throw err;
                } else {
                    if (_this._regionCache.length === _this._regionIndex + 1) {
                        _this._regionIndex = 0;
                        throw err;
                    } else {
                        _this._regionIndex++;
                        return _this.requestApi(opts);
                    }
                }
            }
        })();
    }
    /**
   * Sends an http request
   * @param {Object} opts options request options
   * @returns {Promise<Object|String|any>} request result
   */ request(opts) {
        return this._httpClient.request(opts);
    }
    _updateHost() {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this._urlCache || _this._urlCache.lastUpdated < Date.now() - 1000 * 60 * 10) {
                yield _this._updateRegions();
                const urlSettings = yield _this._httpClient.request({
                    url: `https://mt-provisioning-api-v1.${_this._domain}/users/current/servers/mt-client-api`,
                    method: 'GET',
                    headers: {
                        'auth-token': _this._token
                    },
                    json: true
                });
                _this._urlCache = {
                    url: `https://${_this._apiPath}.${_this._regionCache[_this._regionIndex]}.${urlSettings.domain}`,
                    domain: urlSettings.domain,
                    lastUpdated: Date.now()
                };
            } else {
                _this._urlCache = {
                    url: `https://${_this._apiPath}.${_this._regionCache[_this._regionIndex]}.${_this._urlCache.domain}`,
                    domain: _this._urlCache.domain,
                    lastUpdated: Date.now()
                };
            }
        })();
    }
    _updateRegions() {
        var _this = this;
        return _async_to_generator(function*() {
            _this._regionIndex = 0;
            _this._regionCache = yield _this._httpClient.request({
                url: `https://mt-provisioning-api-v1.${_this._domain}/users/current/regions`,
                method: 'GET',
                headers: {
                    'auth-token': _this._token
                },
                json: true
            });
        })();
    }
    /**
   * Constructs domain client instance
   * @param {HttpClient} httpClient HTTP client
   * @param {String} token authorization token
   * @param {String} apiPath api url part
   * @param {String} domain domain to connect to, default is agiliumtrade.agiliumtrade.ai
   */ constructor(httpClient, token, apiPath, domain = 'agiliumtrade.agiliumtrade.ai'){
        this._httpClient = httpClient;
        this._apiPath = apiPath;
        this._domain = domain;
        this._token = token;
        this._urlCache = null;
        this._regionCache = [];
        this._regionIndex = 0;
    }
};
/**
 * Connection URL and request managing client
 */ export { DomainClient as default };

//# sourceMappingURL=data:application/json;base64,