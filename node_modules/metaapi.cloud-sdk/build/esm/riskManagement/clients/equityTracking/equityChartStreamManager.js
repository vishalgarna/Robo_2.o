'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import randomstring from 'randomstring';
import SynchronizationListener from '../../../clients/metaApi/synchronizationListener';
import LoggerManager from '../../../logger';
let EquityChartStreamManager = class EquityChartStreamManager {
    /**
   * Returns listeners for account
   * @param {String} accountId account id to return listeners for
   * @returns {{[listenerId: string]: EquityChartListener}} dictionary of account equity chart event listeners
   */ getAccountListeners(accountId) {
        if (!this._equityChartListeners[accountId]) {
            this._equityChartListeners[accountId] = {};
        }
        return this._equityChartListeners[accountId];
    }
    /**
   * Adds an equity chart event listener
   * @param {EquityChartListener} listener equity chart event listener
   * @param {String} accountId account id
   * @param {Date} [startTime] date to start tracking from
   * @returns {Promise<string>} listener id
   */ // eslint-disable-next-line max-statements, complexity
    addEquityChartListener(listener, accountId, startTime) {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this._equityChartCaches[accountId]) {
                _this._equityChartCaches[accountId] = {
                    record: {},
                    lastPeriod: {},
                    pendingInitalizationResolves: []
                };
            }
            const cache = _this._equityChartCaches[accountId];
            let connection = null;
            let retryIntervalInSeconds = _this._retryIntervalInSeconds;
            const equityTrackingClient = _this._equityTrackingClient;
            const getAccountListeners = ()=>_this.getAccountListeners(accountId);
            const pendingInitalizationResolves = _this._pendingInitalizationResolves;
            const synchronizationFlags = _this._accountSynchronizationFlags;
            let EquityChartStreamListener = class EquityChartStreamListener extends SynchronizationListener {
                onDealsSynchronized(instanceIndex, synchronizationId) {
                    var _this = this;
                    return _async_to_generator(function*() {
                        try {
                            if (!synchronizationFlags[accountId]) {
                                synchronizationFlags[accountId] = true;
                                Object.values(getAccountListeners()).forEach((accountListener)=>{
                                    accountListener.onConnected();
                                });
                            }
                            if (pendingInitalizationResolves[accountId]) {
                                pendingInitalizationResolves[accountId].forEach((resolve)=>resolve());
                                delete pendingInitalizationResolves[accountId];
                            }
                        } catch (err) {
                            Object.values(getAccountListeners()).forEach((accountListener)=>{
                                accountListener.onError(err);
                            });
                            _this._logger.error('Error processing onDealsSynchronized event for ' + `equity chart listener for account ${accountId}`, err);
                        }
                    })();
                }
                onDisconnected(instanceIndex) {
                    var _this = this;
                    return _async_to_generator(function*() {
                        try {
                            if (synchronizationFlags[accountId] && !connection.healthMonitor.healthStatus.synchronized) {
                                synchronizationFlags[accountId] = false;
                                Object.values(getAccountListeners()).forEach((accountListener)=>{
                                    accountListener.onDisconnected();
                                });
                            }
                        } catch (err) {
                            Object.values(getAccountListeners()).forEach((accountListener)=>{
                                accountListener.onError(err);
                            });
                            _this._logger.error('Error processing onDisconnected event for ' + `equity chart listener for account ${accountId}`, err);
                        }
                    })();
                }
                // eslint-disable-next-line complexity, max-statements
                onSymbolPriceUpdated(instanceIndex, price) {
                    var _this = this;
                    return _async_to_generator(function*() {
                        try {
                            if (pendingInitalizationResolves[accountId]) {
                                pendingInitalizationResolves[accountId].forEach((resolve)=>resolve());
                                delete pendingInitalizationResolves[accountId];
                            }
                            const equity = price.equity;
                            const brokerTime = price.brokerTime;
                            if (!cache.lastPeriod) {
                                return;
                            }
                            if (brokerTime > cache.lastPeriod.endBrokerTime) {
                                Object.values(getAccountListeners()).forEach((accountListener)=>{
                                    accountListener.onEquityRecordCompleted();
                                });
                                const startBrokerTime = cache.lastPeriod.startBrokerTime;
                                cache.lastPeriod = null;
                                // eslint-disable-next-line no-constant-condition
                                while(true){
                                    let periods = yield equityTrackingClient.getEquityChart(accountId, startBrokerTime, undefined, true);
                                    if (periods.length < 2) {
                                        yield new Promise((res)=>setTimeout(res, 10000));
                                    } else {
                                        Object.values(getAccountListeners()).forEach((accountListener)=>{
                                            accountListener.onEquityRecordUpdated(periods);
                                        });
                                        cache.lastPeriod = periods[1];
                                        break;
                                    }
                                }
                            } else {
                                const accountInformation = connection.terminalState.accountInformation;
                                if (accountInformation) {
                                    const previousInfo = {
                                        startBrokerTime: cache.lastPeriod.startBrokerTime,
                                        endBrokerTime: cache.lastPeriod.endBrokerTime,
                                        averageBalance: cache.record.averageBalance,
                                        minBalance: cache.record.minBalance,
                                        maxBalance: cache.record.maxBalance,
                                        averageEquity: Math.floor(cache.record.averageEquity),
                                        minEquity: cache.record.minEquity,
                                        maxEquity: cache.record.maxEquity,
                                        lastBalance: cache.lastPeriod.lastBalance,
                                        lastEquity: cache.lastPeriod.lastEquity
                                    };
                                    let durationIncrement = new Date(brokerTime).getTime() - new Date(cache.lastPeriod.brokerTime).getTime();
                                    cache.lastPeriod.equitySum += durationIncrement * (cache.lastPeriod.equity || accountInformation.equity);
                                    cache.lastPeriod.balanceSum += durationIncrement * (cache.lastPeriod.balance || accountInformation.balance);
                                    cache.lastPeriod.duration += durationIncrement;
                                    cache.lastPeriod.equity = price.equity;
                                    cache.lastPeriod.balance = accountInformation.balance;
                                    cache.lastPeriod.brokerTime = price.brokerTime;
                                    cache.record.duration = cache.lastPeriod.duration;
                                    cache.record.balanceSum = cache.lastPeriod.balanceSum;
                                    cache.record.equitySum = cache.lastPeriod.equitySum;
                                    cache.record.averageEquity = cache.lastPeriod.duration ? cache.lastPeriod.equitySum / cache.lastPeriod.duration : equity;
                                    cache.record.averageBalance = cache.lastPeriod.duration ? cache.lastPeriod.balanceSum / cache.lastPeriod.duration : accountInformation.balance;
                                    cache.record.minEquity = Math.min(cache.record.minEquity, price.equity);
                                    cache.record.maxEquity = Math.max(cache.record.maxEquity, price.equity);
                                    cache.record.lastEquity = equity;
                                    cache.record.minBalance = Math.min(cache.record.minBalance, accountInformation.balance);
                                    cache.record.maxBalance = Math.max(cache.record.maxBalance, accountInformation.balance);
                                    cache.record.lastBalance = accountInformation.balance;
                                    /**
             * due to calculation inaccuracy, averageEquity will never match the previous value
             * therefore, floor before comparing
             */ if (cache.lastPeriod.startBrokerTime) {
                                        const newInfo = {
                                            startBrokerTime: cache.lastPeriod.startBrokerTime,
                                            endBrokerTime: cache.lastPeriod.endBrokerTime,
                                            averageBalance: cache.record.averageBalance,
                                            minBalance: cache.record.minBalance,
                                            maxBalance: cache.record.maxBalance,
                                            averageEquity: Math.floor(cache.record.averageEquity),
                                            minEquity: cache.record.minEquity,
                                            maxEquity: cache.record.maxEquity,
                                            lastBalance: cache.record.lastBalance,
                                            lastEquity: cache.record.lastEquity
                                        };
                                        if (JSON.stringify(previousInfo) !== JSON.stringify(newInfo)) {
                                            Object.values(getAccountListeners()).forEach((accountListener)=>{
                                                accountListener.onEquityRecordUpdated([
                                                    newInfo
                                                ]);
                                            });
                                        }
                                    }
                                }
                            }
                        } catch (err) {
                            Object.values(getAccountListeners()).forEach((accountListener)=>{
                                accountListener.onError(err);
                            });
                            _this._logger.error('Error processing onSymbolPriceUpdated event for ' + `equity chart listener for account ${accountId}`, err);
                        }
                    })();
                }
                onAccountInformationUpdated(instanceIndex, accountInformation) {
                    var _this = this;
                    return _async_to_generator(function*() {
                        try {
                            const balance = accountInformation.balance;
                            cache.lastPeriod.balance = balance;
                            cache.lastPeriod.lastBalance = balance;
                            cache.record.lastBalance = balance;
                            cache.record.minBalance = Math.min(cache.record.minBalance, balance);
                            cache.record.maxBalance = Math.max(cache.record.minBalance, balance);
                        } catch (err) {
                            Object.values(getAccountListeners()).forEach((accountListener)=>{
                                accountListener.onError(err);
                            });
                            _this._logger.error('Error processing onAccountInformationUpdated event for ' + `equity chart listener for account ${accountId}`, err);
                        }
                    })();
                }
            };
            const listenerId = randomstring.generate(10);
            const accountListeners = _this.getAccountListeners(accountId);
            accountListeners[listenerId] = listener;
            _this._accountsByListenerId[listenerId] = accountId;
            const account = yield _this._metaApi.metatraderAccountApi.getAccount(accountId);
            let isDeployed = false;
            while(!isDeployed){
                try {
                    yield account.waitDeployed();
                    isDeployed = true;
                } catch (err) {
                    listener.onError(err);
                    _this._logger.error(`Error wait for account ${accountId} to deploy, retrying`, err);
                    yield new Promise((res)=>setTimeout(res, retryIntervalInSeconds * 1000));
                    retryIntervalInSeconds = Math.min(retryIntervalInSeconds * 2, 300);
                }
            }
            if (!_this._equityChartConnections[accountId]) {
                retryIntervalInSeconds = _this._retryIntervalInSeconds;
                connection = account.getStreamingConnection();
                _this._equityChartConnections[accountId] = connection;
                const syncListener = new EquityChartStreamListener();
                connection.addSynchronizationListener(syncListener);
                let isSynchronized = false;
                while(!isSynchronized){
                    try {
                        yield connection.connect();
                        yield connection.waitSynchronized();
                        isSynchronized = true;
                    } catch (err) {
                        listener.onError(err);
                        _this._logger.error(`Error configuring equity chart stream listener for account ${accountId}, retrying`, err);
                        yield new Promise((res)=>setTimeout(res, retryIntervalInSeconds * 1000));
                        retryIntervalInSeconds = Math.min(retryIntervalInSeconds * 2, 300);
                    }
                }
                retryIntervalInSeconds = _this._retryIntervalInSeconds;
            } else {
                connection = _this._equityChartConnections[accountId];
                if (!connection.healthMonitor.healthStatus.synchronized) {
                    if (!_this._pendingInitalizationResolves[accountId]) {
                        _this._pendingInitalizationResolves[accountId] = [];
                    }
                    let resolveInitialize;
                    let initializePromise = new Promise((res, rej)=>{
                        resolveInitialize = res;
                    });
                    _this._pendingInitalizationResolves[accountId].push(resolveInitialize);
                    yield initializePromise;
                }
            }
            let initialData = [];
            while(!initialData.length){
                try {
                    initialData = yield equityTrackingClient.getEquityChart(accountId, startTime, undefined, true);
                    if (initialData.length) {
                        const lastItem = initialData.slice(-1)[0];
                        listener.onEquityRecordUpdated(initialData);
                        cache.lastPeriod = {
                            duration: lastItem.duration,
                            equitySum: lastItem.equitySum,
                            balanceSum: lastItem.balanceSum,
                            startBrokerTime: lastItem.startBrokerTime,
                            endBrokerTime: lastItem.endBrokerTime,
                            brokerTime: lastItem.brokerTime,
                            averageEquity: Math.floor(lastItem.averageEquity),
                            minEquity: lastItem.minEquity,
                            maxEquity: lastItem.maxEquity,
                            averageBalance: lastItem.averageBalance,
                            minBalance: lastItem.minBalance,
                            maxBalance: lastItem.maxBalance,
                            lastBalance: lastItem.lastBalance,
                            lastEquity: lastItem.lastEquity
                        };
                        cache.record = cache.lastPeriod;
                    }
                } catch (err) {
                    listener.onError(err);
                    _this._logger.error(`Failed initialize equity chart data for account ${accountId}`, err);
                    yield new Promise((res)=>setTimeout(res, retryIntervalInSeconds * 1000));
                    retryIntervalInSeconds = Math.min(retryIntervalInSeconds * 2, 300);
                }
            }
            return listenerId;
        })();
    }
    /**
   * Removes equity chart event listener by id
   * @param {String} listenerId listener id
   */ removeEquityChartListener(listenerId) {
        if (this._accountsByListenerId[listenerId]) {
            const accountId = this._accountsByListenerId[listenerId];
            delete this._accountSynchronizationFlags[accountId];
            delete this._accountsByListenerId[listenerId];
            if (this._equityChartListeners[accountId]) {
                delete this._equityChartListeners[accountId][listenerId];
            }
            if (this._equityChartConnections[accountId] && !Object.keys(this._equityChartListeners[accountId]).length) {
                this._equityChartConnections[accountId].close();
                delete this._equityChartConnections[accountId];
            }
        }
    }
    /**
   * Constructs equity chart event listener manager instance
   * @param {DomainClient} domainClient domain client
   * @param {EquityTrackingClient} equityTrackingClient equity tracking client
   * @param {MetaApi} metaApi metaApi SDK instance
   */ constructor(domainClient, equityTrackingClient, metaApi){
        this._domainClient = domainClient;
        this._equityTrackingClient = equityTrackingClient;
        this._metaApi = metaApi;
        this._equityChartListeners = {};
        this._accountsByListenerId = {};
        this._equityChartConnections = {};
        this._equityChartCaches = {};
        this._accountSynchronizationFlags = {};
        this._pendingInitalizationResolves = {};
        this._retryIntervalInSeconds = 1;
        this._logger = LoggerManager.getLogger('EquityChartStreamManager');
    }
};
/**
 * Manager for handling equity chart event listeners
 */ export { EquityChartStreamManager as default };

//# sourceMappingURL=data:application/json;base64,