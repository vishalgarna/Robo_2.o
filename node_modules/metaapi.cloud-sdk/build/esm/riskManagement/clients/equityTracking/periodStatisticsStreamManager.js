'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import randomstring from 'randomstring';
import SynchronizationListener from '../../../clients/metaApi/synchronizationListener';
// import {NotFoundError} from '../../../clients/errorHandler';
import LoggerManager from '../../../logger';
let PeriodStatisticsStreamManager = class PeriodStatisticsStreamManager {
    /**
   * Returns listeners for a tracker
   * @param {string} accountId account id to return listeners for
   * @param {string} trackerId tracker id to return listeners for
   * @returns {{[listenerId: string]: PeriodStatisticsListener}} dictionary of period statistics listeners
   */ getTrackerListeners(accountId, trackerId) {
        if (!this._periodStatisticsListeners[accountId] || !this._periodStatisticsListeners[accountId][trackerId]) {
            return {};
        } else {
            return this._periodStatisticsListeners[accountId][trackerId];
        }
    }
    /**
   * Adds a period statistics event listener
   * @param {PeriodStatisticsListener} listener period statistics event listener
   * @param {String} accountId account id
   * @param {String} trackerId tracker id
   * @returns {String} listener id
   */ // eslint-disable-next-line complexity, max-statements
    addPeriodStatisticsListener(listener, accountId, trackerId) {
        var _this = this;
        return _async_to_generator(function*() {
            let newTracker = false;
            if (!_this._periodStatisticsCaches[accountId]) {
                _this._periodStatisticsCaches[accountId] = {};
            }
            if (!_this._periodStatisticsCaches[accountId][trackerId]) {
                newTracker = true;
                _this._periodStatisticsCaches[accountId][trackerId] = {
                    trackerData: {},
                    record: {},
                    lastPeriod: {},
                    equityAdjustments: {}
                };
            }
            const cache = _this._periodStatisticsCaches[accountId][trackerId];
            let connection = null;
            let retryIntervalInSeconds = _this._retryIntervalInSeconds;
            const equityTrackingClient = _this._equityTrackingClient;
            const listenerId = randomstring.generate(10);
            const removePeriodStatisticsListener = _this.removePeriodStatisticsListener;
            const getTrackerListeners = ()=>_this.getTrackerListeners(accountId, trackerId);
            const pendingInitalizationResolves = _this._pendingInitalizationResolves;
            const synchronizationFlags = _this._accountSynchronizationFlags;
            let PeriodStatisticsStreamListener = class PeriodStatisticsStreamListener extends SynchronizationListener {
                onDealsSynchronized(instanceIndex, synchronizationId) {
                    var _this = this;
                    return _async_to_generator(function*() {
                        try {
                            if (!synchronizationFlags[accountId]) {
                                synchronizationFlags[accountId] = true;
                                Object.values(getTrackerListeners()).forEach((accountListener)=>{
                                    accountListener.onConnected();
                                });
                                if (pendingInitalizationResolves[accountId]) {
                                    pendingInitalizationResolves[accountId].forEach((resolve)=>resolve());
                                    delete pendingInitalizationResolves[accountId];
                                }
                            }
                        } catch (err) {
                            listener.onError(err);
                            _this._logger.error('Error processing onDealsSynchronized event for ' + `equity chart listener for account ${accountId}`, err);
                        }
                    })();
                }
                onDisconnected(instanceIndex) {
                    var _this = this;
                    return _async_to_generator(function*() {
                        try {
                            if (synchronizationFlags[accountId] && !connection.healthMonitor.healthStatus.synchronized) {
                                synchronizationFlags[accountId] = false;
                                Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                    trackerListener.onDisconnected();
                                });
                            }
                        } catch (err) {
                            Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                trackerListener.onError(err);
                            });
                            _this._logger.error('Error processing onDisconnected event for ' + `equity chart listener for account ${accountId}`, err);
                        }
                    })();
                }
                // eslint-disable-next-line complexity, max-statements
                onSymbolPriceUpdated(instanceIndex, price) {
                    var _this = this;
                    return _async_to_generator(function*() {
                        try {
                            if (pendingInitalizationResolves[accountId]) {
                                pendingInitalizationResolves[accountId].forEach((resolve)=>resolve());
                                delete pendingInitalizationResolves[accountId];
                            }
                            if (!cache.lastPeriod) {
                                return;
                            }
                            /**
           * Process brokerTime:
           * - smaller than tracker startBrokerTime -> ignore
           * - bigger than tracker endBrokerTime -> send onTrackerCompleted, close connection
           * - bigger than period endBrokerTime -> send onPeriodStatisticsCompleted
           * - normal -> compare to previous data, if different -> send onPeriodStatisticsUpdated
           */ const equity = price.equity - Object.values(cache.equityAdjustments).reduce((a, b)=>a + b, 0);
                            const brokerTime = price.brokerTime;
                            if (brokerTime > cache.lastPeriod.endBrokerTime) {
                                Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                    trackerListener.onPeriodStatisticsCompleted();
                                });
                                cache.equityAdjustments = {};
                                const startBrokerTime = cache.lastPeriod.startBrokerTime;
                                cache.lastPeriod = null;
                                // eslint-disable-next-line no-constant-condition
                                while(true){
                                    let periods = yield equityTrackingClient.getTrackingStatistics(accountId, trackerId, undefined, 2, true);
                                    if (periods[0].startBrokerTime === startBrokerTime) {
                                        yield new Promise((res)=>setTimeout(res, 10000));
                                    } else {
                                        cache.lastPeriod = periods[0];
                                        periods.reverse();
                                        Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                            trackerListener.onPeriodStatisticsUpdated(periods);
                                        });
                                        break;
                                    }
                                }
                            } else {
                                if (cache.trackerData.startBrokerTime && brokerTime < cache.trackerData.startBrokerTime) {
                                    return;
                                }
                                if (cache.trackerData.endBrokerTime && brokerTime > cache.trackerData.endBrokerTime) {
                                    Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                        trackerListener.onTrackerCompleted();
                                    });
                                    cache.equityAdjustments = {};
                                    Object.keys(getTrackerListeners()).forEach((trackerListenerId)=>{
                                        removePeriodStatisticsListener(trackerListenerId);
                                    });
                                }
                                let absoluteDrawdown = Math.max(0, cache.lastPeriod.initialBalance - equity);
                                let relativeDrawdown = absoluteDrawdown / cache.lastPeriod.initialBalance;
                                let absoluteProfit = Math.max(0, equity - cache.lastPeriod.initialBalance);
                                let relativeProfit = absoluteProfit / cache.lastPeriod.initialBalance;
                                const previousRecord = JSON.stringify(cache.record);
                                if (!cache.record.thresholdExceeded) {
                                    if (cache.record.maxAbsoluteDrawdown < absoluteDrawdown) {
                                        cache.record.maxAbsoluteDrawdown = absoluteDrawdown;
                                        cache.record.maxRelativeDrawdown = relativeDrawdown;
                                        cache.record.maxDrawdownTime = brokerTime;
                                        if (cache.trackerData.relativeDrawdownThreshold && cache.trackerData.relativeDrawdownThreshold < relativeDrawdown || cache.trackerData.absoluteDrawdownThreshold && cache.trackerData.absoluteDrawdownThreshold < absoluteDrawdown) {
                                            cache.record.thresholdExceeded = true;
                                            cache.record.exceededThresholdType = 'drawdown';
                                        }
                                    }
                                    if (cache.record.maxAbsoluteProfit < absoluteProfit) {
                                        cache.record.maxAbsoluteProfit = absoluteProfit;
                                        cache.record.maxRelativeProfit = relativeProfit;
                                        cache.record.maxProfitTime = brokerTime;
                                        if (cache.trackerData.relativeProfitThreshold && cache.trackerData.relativeProfitThreshold < relativeProfit || cache.trackerData.absoluteProfitThreshold && cache.trackerData.absoluteProfitThreshold < absoluteProfit) {
                                            cache.record.thresholdExceeded = true;
                                            cache.record.exceededThresholdType = 'profit';
                                        }
                                    }
                                    if (JSON.stringify(cache.record) !== previousRecord) {
                                        Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                            trackerListener.onPeriodStatisticsUpdated([
                                                {
                                                    startBrokerTime: cache.lastPeriod.startBrokerTime,
                                                    endBrokerTime: cache.lastPeriod.endBrokerTime,
                                                    initialBalance: cache.lastPeriod.initialBalance,
                                                    maxAbsoluteDrawdown: cache.record.maxAbsoluteDrawdown,
                                                    maxAbsoluteProfit: cache.record.maxAbsoluteProfit,
                                                    maxDrawdownTime: cache.record.maxDrawdownTime,
                                                    maxProfitTime: cache.record.maxProfitTime,
                                                    maxRelativeDrawdown: cache.record.maxRelativeDrawdown,
                                                    maxRelativeProfit: cache.record.maxRelativeProfit,
                                                    period: cache.lastPeriod.period,
                                                    exceededThresholdType: cache.record.exceededThresholdType,
                                                    thresholdExceeded: cache.record.thresholdExceeded,
                                                    tradeDayCount: cache.record.tradeDayCount
                                                }
                                            ]);
                                        });
                                    }
                                }
                            }
                        } catch (err) {
                            Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                trackerListener.onError(err);
                            });
                            _this._logger.error('Error processing onSymbolPriceUpdated event for ' + `period statistics listener for account ${accountId}`, err);
                        }
                    })();
                }
                onDealAdded(instanceIndex, deal) {
                    var _this = this;
                    return _async_to_generator(function*() {
                        try {
                            if (!cache.lastPeriod || !Object.keys(cache.lastPeriod).length) {
                                return;
                            }
                            if (deal.type === 'DEAL_TYPE_BALANCE') {
                                cache.equityAdjustments[deal.id] = deal.profit;
                            }
                            const ignoredDealTypes = [
                                'DEAL_TYPE_BALANCE',
                                'DEAL_TYPE_CREDIT'
                            ];
                            if (!ignoredDealTypes.includes(deal.type)) {
                                const timeDiff = new Date(deal.time).getTime() - new Date(deal.brokerTime).getTime();
                                const startSearchDate = new Date(new Date(cache.lastPeriod.startBrokerTime).getTime() + timeDiff);
                                const deals = connection.historyStorage.getDealsByTimeRange(startSearchDate, new Date(8640000000000000)).filter((dealItem)=>!ignoredDealTypes.includes(dealItem.type));
                                deals.push(deal);
                                const tradedDays = {};
                                deals.forEach((dealItem)=>{
                                    tradedDays[dealItem.brokerTime.slice(0, 10)] = true;
                                });
                                const tradeDayCount = Object.keys(tradedDays).length;
                                if (cache.record.tradeDayCount !== tradeDayCount) {
                                    cache.record.tradeDayCount = tradeDayCount;
                                    Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                        trackerListener.onPeriodStatisticsUpdated([
                                            {
                                                startBrokerTime: cache.lastPeriod.startBrokerTime,
                                                endBrokerTime: cache.lastPeriod.endBrokerTime,
                                                initialBalance: cache.lastPeriod.initialBalance,
                                                maxAbsoluteDrawdown: cache.record.maxAbsoluteDrawdown,
                                                maxAbsoluteProfit: cache.record.maxAbsoluteProfit,
                                                maxDrawdownTime: cache.record.maxDrawdownTime,
                                                maxProfitTime: cache.record.maxProfitTime,
                                                maxRelativeDrawdown: cache.record.maxRelativeDrawdown,
                                                maxRelativeProfit: cache.record.maxRelativeProfit,
                                                period: cache.lastPeriod.period,
                                                exceededThresholdType: cache.record.exceededThresholdType,
                                                thresholdExceeded: cache.record.thresholdExceeded,
                                                tradeDayCount: cache.record.tradeDayCount
                                            }
                                        ]);
                                    });
                                }
                            }
                        } catch (err) {
                            Object.values(getTrackerListeners()).forEach((trackerListener)=>{
                                trackerListener.onError(err);
                            });
                            _this._logger.error('Error processing onDealAdded event for ' + `period statistics listener for account ${accountId}`, err);
                        }
                    })();
                }
            };
            const account = yield _this._metaApi.metatraderAccountApi.getAccount(accountId);
            const tracker = yield equityTrackingClient.getTracker(accountId, trackerId);
            cache.trackerData = tracker;
            if (!_this._periodStatisticsListeners[accountId]) {
                _this._periodStatisticsListeners[accountId] = {};
            }
            if (!_this._periodStatisticsListeners[accountId][trackerId]) {
                _this._periodStatisticsListeners[accountId][trackerId] = {};
            }
            const accountListeners = _this._periodStatisticsListeners[accountId][trackerId];
            accountListeners[listenerId] = listener;
            _this._accountsByListenerId[listenerId] = accountId;
            _this._trackersByListenerId[listenerId] = trackerId;
            let isDeployed = false;
            while(!isDeployed){
                try {
                    yield account.waitDeployed();
                    isDeployed = true;
                } catch (err) {
                    listener.onError(err);
                    _this._logger.error(`Error wait for account ${accountId} to deploy, retrying`, err);
                    yield new Promise((res)=>setTimeout(res, retryIntervalInSeconds * 1000));
                    retryIntervalInSeconds = Math.min(retryIntervalInSeconds * 2, 300);
                }
            }
            if (!_this._periodStatisticsConnections[accountId]) {
                retryIntervalInSeconds = _this._retryIntervalInSeconds;
                connection = account.getStreamingConnection();
                const syncListener = new PeriodStatisticsStreamListener();
                connection.addSynchronizationListener(syncListener);
                _this._periodStatisticsConnections[accountId] = connection;
                _this._syncListeners[trackerId] = syncListener;
                let isSynchronized = false;
                while(!isSynchronized){
                    try {
                        yield connection.connect();
                        yield connection.waitSynchronized();
                        isSynchronized = true;
                    } catch (err) {
                        listener.onError(err);
                        _this._logger.error('Error configuring period statistics stream listener for ' + `account ${accountId}, retrying`, err);
                        yield new Promise((res)=>setTimeout(res, retryIntervalInSeconds * 1000));
                        retryIntervalInSeconds = Math.min(retryIntervalInSeconds * 2, 300);
                    }
                }
                retryIntervalInSeconds = _this._retryIntervalInSeconds;
            } else {
                connection = _this._periodStatisticsConnections[accountId];
                if (newTracker) {
                    const syncListener = new PeriodStatisticsStreamListener();
                    connection.addSynchronizationListener(syncListener);
                    _this._syncListeners[trackerId] = syncListener;
                }
                if (!connection.healthMonitor.healthStatus.synchronized) {
                    if (!_this._pendingInitalizationResolves[accountId]) {
                        _this._pendingInitalizationResolves[accountId] = [];
                    }
                    let resolveInitialize;
                    let initializePromise = new Promise((res, rej)=>{
                        resolveInitialize = res;
                    });
                    _this._pendingInitalizationResolves[accountId].push(resolveInitialize);
                    yield initializePromise;
                }
            }
            let initialData = [];
            const fetchInitialData = function() {
                var _ref = _async_to_generator(function*() {
                    try {
                        initialData = yield equityTrackingClient.getTrackingStatistics(accountId, trackerId, undefined, undefined, true);
                        if (initialData.length) {
                            const lastItem = initialData[0];
                            if (_this._fetchInitialDataIntervalId[listenerId]) {
                                clearInterval(_this._fetchInitialDataIntervalId[listenerId]);
                                delete _this._fetchInitialDataIntervalId[listenerId];
                            }
                            listener.onPeriodStatisticsUpdated(initialData);
                            cache.lastPeriod = {
                                startBrokerTime: lastItem.startBrokerTime,
                                endBrokerTime: lastItem.endBrokerTime,
                                period: lastItem.period,
                                initialBalance: lastItem.initialBalance,
                                maxDrawdownTime: lastItem.maxDrawdownTime,
                                maxAbsoluteDrawdown: lastItem.maxAbsoluteDrawdown,
                                maxRelativeDrawdown: lastItem.maxRelativeDrawdown,
                                maxProfitTime: lastItem.maxProfitTime,
                                maxAbsoluteProfit: lastItem.maxAbsoluteProfit,
                                maxRelativeProfit: lastItem.maxRelativeProfit,
                                thresholdExceeded: lastItem.thresholdExceeded,
                                exceededThresholdType: lastItem.exceededThresholdType,
                                tradeDayCount: lastItem.tradeDayCount
                            };
                            cache.record = cache.lastPeriod;
                        }
                    } catch (err) {
                        listener.onError(err);
                        _this._logger.error(`Failed to initialize tracking statistics data for account ${accountId}`, err);
                        yield new Promise((res)=>setTimeout(res, retryIntervalInSeconds * 1000));
                        retryIntervalInSeconds = Math.min(retryIntervalInSeconds * 2, 300);
                    }
                });
                return function fetchInitialData() {
                    return _ref.apply(this, arguments);
                };
            }();
            retryIntervalInSeconds = _this._retryIntervalInSeconds;
            _this._fetchInitialDataIntervalId[listenerId] = setInterval(fetchInitialData, retryIntervalInSeconds * 1000 * 2 * 60);
            fetchInitialData();
            return listenerId;
        })();
    }
    /**
   * Removes period statistics event listener by id
   * @param {String} listenerId listener id 
   */ // eslint-disable-next-line complexity
    removePeriodStatisticsListener(listenerId) {
        if (this._accountsByListenerId[listenerId] && this._trackersByListenerId[listenerId]) {
            if (this._fetchInitialDataIntervalId[listenerId]) {
                clearInterval(this._fetchInitialDataIntervalId[listenerId]);
                delete this._fetchInitialDataIntervalId[listenerId];
            }
            const accountId = this._accountsByListenerId[listenerId];
            const trackerId = this._trackersByListenerId[listenerId];
            delete this._accountsByListenerId[listenerId];
            delete this._trackersByListenerId[listenerId];
            if (this._periodStatisticsListeners[accountId]) {
                if (this._periodStatisticsListeners[accountId][trackerId]) {
                    delete this._periodStatisticsListeners[accountId][trackerId][listenerId];
                    if (!Object.keys(this._periodStatisticsListeners[accountId][trackerId]).length) {
                        delete this._periodStatisticsListeners[accountId][trackerId];
                        if (this._periodStatisticsConnections[accountId] && this._syncListeners[trackerId]) {
                            this._periodStatisticsConnections[accountId].removeSynchronizationListener(this._syncListeners[trackerId]);
                            delete this._syncListeners[trackerId];
                        }
                    }
                }
                if (!Object.keys(this._periodStatisticsListeners[accountId]).length) {
                    delete this._periodStatisticsListeners[accountId];
                }
            }
            if (this._periodStatisticsConnections[accountId] && !this._periodStatisticsListeners[accountId]) {
                delete this._accountSynchronizationFlags[accountId];
                this._periodStatisticsConnections[accountId].close();
                delete this._periodStatisticsConnections[accountId];
            }
        }
    }
    /**
   * Constructs period statistics event listener manager instance
   * @param {DomainClient} domainClient domain client
   * @param {EquityTrackingClient} equityTrackingClient equity tracking client
   * @param {MetaApi} metaApi metaApi SDK instance
   */ constructor(domainClient, equityTrackingClient, metaApi){
        this._domainClient = domainClient;
        this._equityTrackingClient = equityTrackingClient;
        this._metaApi = metaApi;
        this._periodStatisticsListeners = {};
        this._accountsByListenerId = {};
        this._trackersByListenerId = {};
        this._trackerSyncListeners = {};
        this._periodStatisticsConnections = {};
        this._periodStatisticsCaches = {};
        this._accountSynchronizationFlags = {};
        this._pendingInitalizationResolves = {};
        this._syncListeners = {};
        this._retryIntervalInSeconds = 1;
        this._fetchInitialDataIntervalId = {};
        this.removePeriodStatisticsListener = this.removePeriodStatisticsListener.bind(this);
        this._logger = LoggerManager.getLogger('PeriodStatisticsStreamManager');
    }
};
/**
 * Manager for handling period statistics event listeners
 */ export { PeriodStatisticsStreamManager as default };

//# sourceMappingURL=data:application/json;base64,