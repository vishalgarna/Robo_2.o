'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import MetaApiClient from '../../metaapi.client';
import randomstring from 'randomstring';
import LoggerManager from '../../../logger';
let UserLogListenerManager = class UserLogListenerManager extends MetaApiClient {
    /**
   * Returns the dictionary of strategy log listeners
   * @returns {Object} dictionary of strategy log listeners
   */ get strategyLogListeners() {
        return this._strategyLogListeners;
    }
    /**
   * Returns the dictionary of subscriber log listeners
   * @returns {Object} dictionary of subscriber log listeners
   */ get subscriberLogListeners() {
        return this._subscriberLogListeners;
    }
    /**
   * Adds a strategy log listener
   * @param {UserLogListener} listener user log listener
   * @param {String} strategyId strategy id
   * @param {Date} [startTime] log search start time
   * @param {String} [positionId] position id filter
   * @param {'DEBUG'|'INFO'|'WARN'|'ERROR'} [level] minimum severity level
   * @param {Number} [limit] log pagination limit
   * @returns {String} strategy log listener id
   */ addStrategyLogListener(listener, strategyId, startTime, positionId, level, limit) {
        const listenerId = randomstring.generate(10);
        this._strategyLogListeners[listenerId] = listener;
        this._startStrategyLogStreamJob(listenerId, listener, strategyId, startTime, positionId, level, limit);
        return listenerId;
    }
    /**
   * Adds a subscriber log listener
   * @param {UserLogListener} listener user log listener
   * @param {String} subscriberId subscriber id
   * @param {Date} [startTime] log search start time
   * @param {string} [strategyId] strategy id filter
   * @param {string} [positionId] position id filter
   * @param {'DEBUG'|'INFO'|'WARN'|'ERROR'} [level] minimum severity level
   * @param {Number} [limit] log pagination limit
   * @returns {String} subscriber log listener id
   */ addSubscriberLogListener(listener, subscriberId, startTime, strategyId, positionId, level, limit) {
        const listenerId = randomstring.generate(10);
        this._subscriberLogListeners[listenerId] = listener;
        this._startSubscriberLogStreamJob(listenerId, listener, subscriberId, startTime, strategyId, positionId, level, limit);
        return listenerId;
    }
    /**
   * Removes strategy log listener by id
   * @param {String} listenerId listener id 
   */ removeStrategyLogListener(listenerId) {
        delete this._strategyLogListeners[listenerId];
    }
    /**
   * Removes subscriber log listener by id
   * @param {String} listenerId listener id 
   */ removeSubscriberLogListener(listenerId) {
        delete this._subscriberLogListeners[listenerId];
    }
    _startStrategyLogStreamJob(listenerId, listener, strategyId, startTime, positionId, level, limit) {
        var _this = this;
        return _async_to_generator(function*() {
            let throttleTime = _this._errorThrottleTime;
            while(_this._strategyLogListeners[listenerId]){
                const opts = {
                    url: `/users/current/strategies/${strategyId}/user-log/stream`,
                    method: 'GET',
                    params: {
                        startTime,
                        positionId,
                        level,
                        limit
                    },
                    headers: {
                        'auth-token': _this._token
                    },
                    json: true
                };
                try {
                    const packets = yield _this._domainClient.requestCopyFactory(opts, true);
                    // stop job if user has unsubscribed in time of new packets has been received
                    if (!_this._strategyLogListeners[listenerId]) {
                        return;
                    }
                    yield listener.onUserLog(packets);
                    throttleTime = _this._errorThrottleTime;
                    if (_this._strategyLogListeners[listenerId] && packets.length) {
                        startTime = new Date(new Date(packets[0].time).getTime() + 1);
                    }
                } catch (err) {
                    yield listener.onError(err);
                    if (err.name === 'NotFoundError') {
                        _this._logger.error(`Strategy ${strategyId} not found, removing listener ${listenerId}`);
                        delete _this._strategyLogListeners[listenerId];
                    } else {
                        _this._logger.error(`Failed to retrieve user log stream for strategy ${strategyId}, ` + `listener ${listenerId}, retrying in ${Math.floor(throttleTime / 1000)} seconds`, err);
                        yield new Promise((res)=>setTimeout(res, throttleTime));
                        throttleTime = Math.min(throttleTime * 2, 30000);
                    }
                }
            }
        })();
    }
    _startSubscriberLogStreamJob(listenerId, listener, subscriberId, startTime, strategyId, positionId, level, limit) {
        var _this = this;
        return _async_to_generator(function*() {
            let throttleTime = _this._errorThrottleTime;
            while(_this._subscriberLogListeners[listenerId]){
                const opts = {
                    url: `/users/current/subscribers/${subscriberId}/user-log/stream`,
                    method: 'GET',
                    params: {
                        startTime,
                        strategyId,
                        positionId,
                        level,
                        limit
                    },
                    headers: {
                        'auth-token': _this._token
                    },
                    json: true
                };
                try {
                    const packets = yield _this._domainClient.requestCopyFactory(opts, true);
                    // stop job if user has unsubscribed in time of new packets has been received
                    if (!_this._subscriberLogListeners[listenerId]) {
                        return;
                    }
                    yield listener.onUserLog(packets);
                    throttleTime = _this._errorThrottleTime;
                    if (_this._subscriberLogListeners[listenerId] && packets.length) {
                        startTime = new Date(new Date(packets[0].time).getTime() + 1);
                    }
                } catch (err) {
                    yield listener.onError(err);
                    if (err.name === 'NotFoundError') {
                        _this._logger.error(`Subscriber ${subscriberId} not found, removing listener ${listenerId}`);
                        delete _this._subscriberLogListeners[listenerId];
                    } else {
                        _this._logger.error(`Failed to retrieve user log stream for subscriber ${subscriberId}, ` + `listener ${listenerId}, retrying in ${Math.floor(throttleTime / 1000)} seconds`, err);
                        yield new Promise((res)=>setTimeout(res, throttleTime));
                        throttleTime = Math.min(throttleTime * 2, 30000);
                    }
                }
            }
        })();
    }
    /**
   * Constructs user log event listener manager instance
   * @param {DomainClient} domainClient domain client
   */ constructor(domainClient){
        super(domainClient);
        this._domainClient = domainClient;
        this._strategyLogListeners = {};
        this._subscriberLogListeners = {};
        this._errorThrottleTime = 1000;
        this._logger = LoggerManager.getLogger('UserLogListenerManager');
    }
};
/**
 * User log event listener manager
 */ export { UserLogListenerManager as default };

//# sourceMappingURL=data:application/json;base64,